CREATE TABLE employee(
    emp_id INT PRIMARY KEY,
    first_name VARCHAR(40),
    last_name VARCHAR(40),
    birth_date DATE,
    sex VARCHAR(1),
    salary INT,
    super_id INT,
    branch_id INT

);
CREATE TABLE branch(
branch_id INT PRIMARY KEY,
branch_name VARCHAR(40),
mgr_id INT ,
mgr_start_date DATE,
FOREIGN KEY(mgr_id) REFERENCES employee(emp_id) ON DELETE SET NULL
);
ALTER TABLE employee
ADD FOREIGN KEY (super_id)
REFERENCES employee(emp_id) ON DELETE SET NULL;

ALTER TABLE employee
ADD FOREIGN KEY (branch_id)
REFERENCES branch(branch_id) 
ON DELETE SET NULL;

CREATE TABLE client(
    client_id INT PRIMARY KEY,
    client_name VARCHAR(40),
    branch_id INT,
    FOREIGN KEY(branch_id)
    REFERENCES branch(branch_id)
    ON DELETE SET NULL
);
CREATE TABLE works_with(
    emp_id INT,
    client_id INT,
    total_sales INT,
    PRIMARY KEY (emp_id,client_id),
    FOREIGN KEY(emp_id) REFERENCES employee(emp_id) ON DELETE CASCADE,
    FOREIGN KEY (client_id) REFERENCES client(client_id) ON DELETE CASCADE
);

CREATE TABLE branch_supplier(
    branch_id INT,
    supplier_name VARCHAR(40),
    supply_type VARCHAR(40),
    PRIMARY KEY(branch_id,supplier_name),
    FOREIGN KEY(branch_id) REFERENCES branch(branch_id)
    ON DELETE CASCADE

);
--corporate
INSERT INTO employee VALUES(100, 'David', 'Wallace', '1967-11-17', 'M', 250000, NULL, NULL);
INSERT INTO branch VALUES(1, 'Corporate', 100, '2006-02-09');
UPDATE employee
SET branch_id = 1
WHERE emp_id = 100;
INSERT INTO employee VALUES(101, 'Jan', 'Levinson', '1961-05-11', 'F', 110000, 100, 1);
-- scranton
INSERT INTO employee VALUES(102, 'Michael', 'Scott', '1964-03-15', 'M', 75000, 100, NULL);

INSERT INTO branch VALUES(2, 'Scranton', 102, '1992-04-06');

UPDATE employee
SET branch_id = 2
WHERE emp_id = 102;

INSERT INTO employee VALUES(103, 'Angela', 'Martin', '1971-06-25', 'F', 63000, 102, 2);
INSERT INTO employee VALUES(104, 'Kelly', 'Kapoor', '1980-02-05', 'F', 55000, 102, 2);
INSERT INTO employee VALUES(105, 'Stanley', 'Hudson', '1958-02-19', 'M', 69000, 102, 2);

-- Stamford
INSERT INTO employee VALUES(106, 'Josh', 'Porter', '1969-09-05', 'M', 78000, 100, NULL);

INSERT INTO branch VALUES(3, 'Stamford', 106, '1998-02-13');

UPDATE employee
SET branch_id = 3
WHERE emp_id = 106;

INSERT INTO employee VALUES(107, 'Andy', 'Bernard', '1973-07-22', 'M', 65000, 106, 3);
INSERT INTO employee VALUES(108, 'Jim', 'Halpert', '1978-10-01', 'M', 71000, 106, 3);
-- BRANCH SUPPLIER
INSERT INTO branch_supplier VALUES(2, 'Hammer Mill', 'Paper');
INSERT INTO branch_supplier VALUES(2, 'Uni-ball', 'Writing Utensils');
INSERT INTO branch_supplier VALUES(3, 'Patriot Paper', 'Paper');
INSERT INTO branch_supplier VALUES(2, 'J.T. Forms & Labels', 'Custom Forms');
INSERT INTO branch_supplier VALUES(3, 'Uni-ball', 'Writing Utensils');
INSERT INTO branch_supplier VALUES(3, 'Hammer Mill', 'Paper');
INSERT INTO branch_supplier VALUES(3, 'Stamford Lables', 'Custom Forms');

-- CLIENT
INSERT INTO client VALUES(400, 'Dunmore Highschool', 2);
INSERT INTO client VALUES(401, 'Lackawana Country', 2);
INSERT INTO client VALUES(402, 'FedEx', 3);
INSERT INTO client VALUES(403, 'John Daly Law, LLC', 3);
INSERT INTO client VALUES(404, 'Scranton Whitepages', 2);
INSERT INTO client VALUES(405, 'Times Newspaper', 3);
INSERT INTO client VALUES(406, 'FedEx', 2);
-- WORKS_WITH
INSERT INTO works_with VALUES(105, 400, 55000);
INSERT INTO works_with VALUES(102, 401, 267000);
INSERT INTO works_with VALUES(108, 402, 22500);
INSERT INTO works_with VALUES(107, 403, 5000);
INSERT INTO works_with VALUES(108, 403, 12000);
INSERT INTO works_with VALUES(105, 404, 33000);
INSERT INTO works_with VALUES(107, 405, 26000);
INSERT INTO works_with VALUES(102, 406, 15000);
INSERT INTO works_with VALUES(105, 406, 130000);
--select every employee
SELECT *
FROM employee;
--select everyone from client
SELECT *
FROM client;
--find all employee order by salary
SELECT *
FROM employee
ORDER BY salary;

--find all employee ordered by sex than name
SELECT *
FROM employee
ORDER BY sex,first_name,last_name; 
--find first 5 employees
SELECT *
FROM employee
LIMIT 5;
--first and last names of all employees
SELECT first_name,last_name
FROM employee;
--select firstname as forename last b=name as surname
SELECT first_name AS forename,last_name AS surname
FROM employee;
--find out all different genders
SELECT DISTINCT sex
FROM employee;
--based on branch id
SELECT DISTINCT branch_id
FROM employee;

--n of employee
SELECT COUNT(emp_id)
FROM employee;
--how many emp have supervisor
SELECT COUNT(super_id)
FROM employee;
--female employee born after 1970
SELECT COUNT(emp_id)
FROM employee
WHERE sex='F' AND birth_date>'1970-01-01';
--avg of all emp salary
SELECT AVG(salary)
FROM employee;
--only male emp salary avg
SELECT AVG(salary),sex
FROM employee
WHERE sex='M';
--sum of all emp salary
SELECT SUM(salary)
FROM employee;
--aggregation 
--how many maes and how many females
SELECT COUNT(sex),sex
FROM employee
GROUP BY sex;
--total sales of each salesman
SELECT SUM(total_sales),emp_id
FROM works_with
GROUP BY emp_id;
--how much money each client apent
SELECT SUM(total_sales),client_id
FROM works_with
GROUP BY client_id;

--wildcards
--% = any # of characters, _= only single character
--fund any clients who are in LLC
SELECT *
FROM client
WHERE client_name LIKE '%LLC';

--find any branch suppliers who are in label business
SELECT *
FROM branch_supplier
WHERE supplier_name LIKE '%label%';

--find any employee birn in october
SELECT *
FROM employee
WHERE birth_date LIKE '____-10%';
--find any clients who are in schools
SELECT *
FROM client
WHERE client_name LIKE '%school%';

--UNIONS
--FIND A LIST OF EMPLOYEE AND BRANCH NAME4
SELECT first_name
FROM employee
UNION
SELECT branch_name
FROM branch;
--USING AS
SELECT first_name AS all_data
FROM employee
UNION
SELECT branch_name
FROM branch;
--FIND A LIST OF CLIENTS AND BRANCH SUPPLIER NAMES
SELECT client_name
FROM client
UNION 
SELECT supplier_name
FROM branch_supplier;
--
SELECT client_name,branch_id
FROM client
UNION 
SELECT supplier_name,branch_id
FROM branch_supplier;
--
SELECT client_name,client.branch_id
FROM client
UNION 
SELECT supplier_name,branch_supplier.branch_id
FROM branch_supplier;
--FIND LIST OF ALL MONY SPENT AND EARNED
SELECT salary
FROM employee
UNION
SELECT total_sales 
FROM works_with;
--JOINS
INSERT INTO branch VALUES(4,'buffalo',NULL,NULL);
--FIND ALL BRANCH AND NAMES OF THEIR MANAEGRS
-- SELECT employee.emp_id,employee.first_name,branch.branch_name
-- FROM employee
-- JOIN branch
-- ON employee.emp_id=branch.mgr_id;

-- SELECT employee.emp_id,employee.first_name,branch.branch_name
-- FROM employee
-- LEFT JOIN branch
-- ON employee.emp_id=branch.mgr_id;

SELECT employee.emp_id,employee.first_name,branch.branch_name
FROM employee
RIGHT JOIN branch
ON employee.emp_id=branch.mgr_id;

SELECT employee.emp_id,employee.first_name,branch.branch_name
FROM employee
FULL JOIN branch;
ON employee.emp_id=branch.mgr_id;

--NESTED QUERIES
--NAMES OF ALL EMPLOYEES WHO HAVE SOLD OVER 30000 TO A SINGLE CLIENT
   SELECT works_with.emp_id
    FROM works_with
    WHERE works_with.total_sales > 30000;
SELECT employee.first_name,employee.last_name
FROM employee
WHERE employee.emp_id  IN (
    SELECT works_with.emp_id
    FROM works_with
    WHERE works_with.total_sales > 30000
);
--FIND ALL CLIEBTS WHO ARE HANDLED BY THE BRANCH THAT MICHEL SCOTT MANAGES,ASSUME YOU KNOW MICHEL ID
SELECT client.client_name
FROM client
WHERE client.branch_id = (
    SELECT branch.branch_id
    FROM branch
    WHERE branch.mgr_id=102
    LIMIT 1
);

--ON DELETE
DELETE FROM employee
WHERE emp_id =102;
SELECT * 
FROM  employee;
SELECT *
FROM branch;

--ON DELETE CASCADE
DELETE FROM branch
WHERE branch_id =2;

SELECT *
FROM branch_supplier;
--TRIGGERS
CREATE TABLE trigger_test(
    message VARCHAR(100)
);
mysql -u root -password

DELIMITER $$
CREATE 
TRIGGER my_trigger BEFORE INSERT
ON employee
FOR EACH ROW BEGIN
INSERT INTO trigger_test VALUES('added new employee');
END $$
DELIMITER ;

SELECT *
FROM employee;

INSERT INTO employee VALUES(109,'oscar','martinez','1968-02-19','M',69000,106,3);
SELECT *
FROM trigger_test;
--new challenge
DELIMITER $$
CREATE 
TRIGGER my_trigger1 BEFORE INSERT
ON employee
FOR EACH ROW BEGIN
INSERT INTO trigger_test VALUES(NEW.first_name);
END $$
DELIMITER ;

INSERT INTO employee VALUES(110,'bharat','reddy','1995-03-19','M',49000,104,3);
SELECT *
FROM trigger_test;

--new challenge
DELIMITER $$
CREATE 
TRIGGER my_trigger2 BEFORE INSERT
ON employee
FOR EACH ROW BEGIN
IF NEW.sex='M' THEN
INSERT INTO trigger_test VALUES('added male employee');
ELSEIF NEW.sex='F' THEN
INSERT INTO trigger_test VALUES('added female');
ELSE
INSERT INTO triiger_test VALUES('added other employee');
    END IF;
    END $$
DELIMITER ;
INSERT INTO employee VALUES(111,'PAM','reddy','1980-03-19','F',49050,106,3);
SELECT *
FROM trigger_test;